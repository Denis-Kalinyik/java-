public class Main {
public static void main(String[] args) {
Root[] equations = new Root[2];
equations[0] = new Linear(2, 3);
equations[1] = new Square(2, -5, 2);

for (Root equation : equations) {
equation.calculateRoots();
equation.printResult();
System.out.println(equation.toString());
System.out.println(equation.equals(equation));
}
}
}

import java.util.Arrays;

class Square extends Root {
private double a;
private double b;
private double c;
private double[] roots;

public Square(double a, double b, double c) {
this.a = a;
this.b = b;
this.c = c;
}

@OverRide
public void calculateRoots() {
double discriminant = b * b - 4 * a * c;
if (discriminant > 0) {
double sqrtDiscriminant = Math.sqrt(discriminant);
roots = new double[2];
roots[0] = (-b + sqrtDiscriminant) / (2 * a);
roots[1] = (-b - sqrtDiscriminant) / (2 * a);
} else if (discriminant == 0) {
roots = new double[1];
roots[0] = -b / (2 * a);
} else {
roots = new double[0];
}
}

@OverRide
public void printResult() {
System.out.println("Roots of the square equation: " + Arrays.toString(roots));
}

@OverRide
public String toString() {
return "Square equation: a=" + a + ", b=" + b + ", c=" + c;
}

@OverRide
public boolean equals(Object obj) {
if (this == obj) {
return true;
}
if (obj == null || getClass() != obj.getClass()) {
return false;
}
Square other = (Square) obj;
return Double.compare(a, other.a) == 0 && Double.compare(b, other.b) == 0 && Double.compare(c, other.c) == 0;
}
}
class Linear extends Root {
private double a;
private double b;
private double root;

public Linear(double a, double b) {
this.a = a;
this.b = b;
}

@OverRide
public void calculateRoots() {
root = -b / a;
}

@OverRide
public void printResult() {
System.out.println("Root of the linear equation: " + root);
}

@OverRide
public String toString() {
return "Linear equation: a=" + a + ", b=" + b;
}

@OverRide
public boolean equals(Object obj) {
if (this == obj) {
return true;
}
if (obj == null || getClass() != obj.getClass()) {
return false;
}
Linear other = (Linear) obj;
return Double.compare(a, other.a) == 0 && Double.compare(b, other.b) == 0;
}
}

abstract class Root {
public abstract void calculateRoots();

public abstract void printResult();
}

